<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="5" total="29" passed="24">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="5421" started-at="2016-11-27T15:10:03Z" finished-at="2016-11-27T15:10:08Z">
    <groups>
    </groups>
    <test name="NGTests" duration-ms="67" started-at="2016-11-27T15:10:03Z" finished-at="2016-11-27T15:10:03Z">
      <class name="org.tinyheb.utils.ServerAdressResolverTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="4" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="ValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="ValidIPAddressTest" duration-ms="5" started-at="2016-11-27T16:10:03Z" data-provider="ValidIPAddressProvider" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.1.1.1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="ValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="ValidIPAddressTest" duration-ms="1" started-at="2016-11-27T16:10:03Z" data-provider="ValidIPAddressProvider" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[255.255.255.255]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="ValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="ValidIPAddressTest" duration-ms="1" started-at="2016-11-27T16:10:03Z" data-provider="ValidIPAddressProvider" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[192.168.1.1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="1" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="ValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="ValidIPAddressTest" duration-ms="1" started-at="2016-11-27T16:10:03Z" data-provider="ValidIPAddressProvider" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.10.1.1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="1" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="ValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="ValidIPAddressTest" duration-ms="1" started-at="2016-11-27T16:10:03Z" data-provider="ValidIPAddressProvider" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[132.254.111.10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="ValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="ValidIPAddressTest" duration-ms="1" started-at="2016-11-27T16:10:03Z" data-provider="ValidIPAddressProvider" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[26.10.2.10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="ValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="ValidIPAddressTest" duration-ms="1" started-at="2016-11-27T16:10:03Z" data-provider="ValidIPAddressProvider" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[127.0.0.1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="InValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="InValidIPAddressTest" duration-ms="2" started-at="2016-11-27T16:10:03Z" data-provider="InvalidIPAddressProvider" depends-on-methods="org.tinyheb.utils.ServerAdressResolverTest.ValidIPAddressTest" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.10.10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="InValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="InValidIPAddressTest" duration-ms="4" started-at="2016-11-27T16:10:03Z" data-provider="InvalidIPAddressProvider" depends-on-methods="org.tinyheb.utils.ServerAdressResolverTest.ValidIPAddressTest" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="InValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="InValidIPAddressTest" duration-ms="1" started-at="2016-11-27T16:10:03Z" data-provider="InvalidIPAddressProvider" depends-on-methods="org.tinyheb.utils.ServerAdressResolverTest.ValidIPAddressTest" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="1" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="InValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="InValidIPAddressTest" duration-ms="1" started-at="2016-11-27T16:10:03Z" data-provider="InvalidIPAddressProvider" depends-on-methods="org.tinyheb.utils.ServerAdressResolverTest.ValidIPAddressTest" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[a.a.a.a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InValidIPAddressTest -->
        <test-method status="PASS" signature="InValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="InValidIPAddressTest" duration-ms="2" started-at="2016-11-27T16:10:03Z" data-provider="InvalidIPAddressProvider" depends-on-methods="org.tinyheb.utils.ServerAdressResolverTest.ValidIPAddressTest" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.0.0.a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="InValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="InValidIPAddressTest" duration-ms="1" started-at="2016-11-27T16:10:03Z" data-provider="InvalidIPAddressProvider" depends-on-methods="org.tinyheb.utils.ServerAdressResolverTest.ValidIPAddressTest" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.10.10.256]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="1" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="InValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="InValidIPAddressTest" duration-ms="0" started-at="2016-11-27T16:10:03Z" data-provider="InvalidIPAddressProvider" depends-on-methods="org.tinyheb.utils.ServerAdressResolverTest.ValidIPAddressTest" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[222.222.2.999]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="InValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="InValidIPAddressTest" duration-ms="1" started-at="2016-11-27T16:10:03Z" data-provider="InvalidIPAddressProvider" depends-on-methods="org.tinyheb.utils.ServerAdressResolverTest.ValidIPAddressTest" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[999.10.10.20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InValidIPAddressTest -->
        <test-method status="PASS" signature="InValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="InValidIPAddressTest" duration-ms="1" started-at="2016-11-27T16:10:03Z" data-provider="InvalidIPAddressProvider" depends-on-methods="org.tinyheb.utils.ServerAdressResolverTest.ValidIPAddressTest" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2222.22.22.22]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="InValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="InValidIPAddressTest" duration-ms="1" started-at="2016-11-27T16:10:03Z" data-provider="InvalidIPAddressProvider" depends-on-methods="org.tinyheb.utils.ServerAdressResolverTest.ValidIPAddressTest" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[22.2222.22.2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InValidIPAddressTest -->
        <test-method status="PASS" signature="InValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="InValidIPAddressTest" duration-ms="0" started-at="2016-11-27T16:10:03Z" data-provider="InvalidIPAddressProvider" depends-on-methods="org.tinyheb.utils.ServerAdressResolverTest.ValidIPAddressTest" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.10.10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InValidIPAddressTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="setUp" is-config="true" duration-ms="0" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="InValidIPAddressTest(java.lang.String)[pri:0, instance:org.tinyheb.utils.ServerAdressResolverTest@73846619]" name="InValidIPAddressTest" duration-ms="1" started-at="2016-11-27T16:10:03Z" data-provider="InvalidIPAddressProvider" depends-on-methods="org.tinyheb.utils.ServerAdressResolverTest.ValidIPAddressTest" finished-at="2016-11-27T16:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.10.10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InValidIPAddressTest -->
      </class> <!-- org.tinyheb.utils.ServerAdressResolverTest -->
    </test> <!-- NGTests -->
    <test name="JUnitTests" duration-ms="5332" started-at="2016-11-27T15:10:03Z" finished-at="2016-11-27T15:10:08Z">
      <class name="org.tinyheb.mobile.activity.MainActivityTests">
        <test-method status="FAIL" signature="testStartPatronShowButton()[pri:0, instance:testStartPatronShowButton(org.tinyheb.mobile.activity.MainActivityTests)]" name="testStartPatronShowButton" duration-ms="3713" started-at="2016-11-27T16:10:03Z" finished-at="2016-11-27T16:10:07Z">
          <exception class="android.content.res.Resources$NotFoundException">
            <message>
              <![CDATA[String resource ID #0x7f080000]]>
            </message>
            <full-stacktrace>
              <![CDATA[android.content.res.Resources$NotFoundException: String resource ID #0x7f080000
	at android.content.res.Resources.getText(Resources.java:312)
	at android.content.res.Resources.getString(Resources.java:400)
	at android.content.Context.getString(Context.java:409)
	at org.robolectric.util.ActivityController.getActivityTitle(ActivityController.java:113)
	at org.robolectric.util.ActivityController.attach(ActivityController.java:61)
	at org.robolectric.util.ActivityController.of(ActivityController.java:32)
	at org.robolectric.Robolectric.buildActivity(Robolectric.java:92)
	at org.robolectric.Robolectric.buildActivity(Robolectric.java:88)
	at org.tinyheb.mobile.activity.MainActivityTests.setUp(MainActivityTests.java:32)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.robolectric.RobolectricTestRunner$2.evaluate(RobolectricTestRunner.java:250)
	at org.robolectric.RobolectricTestRunner.runChild(RobolectricTestRunner.java:176)
	at org.robolectric.RobolectricTestRunner.runChild(RobolectricTestRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.robolectric.RobolectricTestRunner$1.evaluate(RobolectricTestRunner.java:142)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:81)
	at org.testng.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:69)
	at org.testng.TestRunner$1.run(TestRunner.java:689)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1014)
	at org.testng.TestRunner.privateRunJUnit(TestRunner.java:720)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:236)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:81)
]]>
            </full-stacktrace>
          </exception> <!-- android.content.res.Resources$NotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartPatronShowButton -->
        <test-method status="FAIL" signature="testStartSynchronizeButton()[pri:0, instance:testStartSynchronizeButton(org.tinyheb.mobile.activity.MainActivityTests)]" name="testStartSynchronizeButton" duration-ms="25" started-at="2016-11-27T16:10:07Z" finished-at="2016-11-27T16:10:07Z">
          <exception class="android.content.res.Resources$NotFoundException">
            <message>
              <![CDATA[String resource ID #0x7f080000]]>
            </message>
            <full-stacktrace>
              <![CDATA[android.content.res.Resources$NotFoundException: String resource ID #0x7f080000
	at android.content.res.Resources.getText(Resources.java:312)
	at android.content.res.Resources.getString(Resources.java:400)
	at android.content.Context.getString(Context.java:409)
	at org.robolectric.util.ActivityController.getActivityTitle(ActivityController.java:113)
	at org.robolectric.util.ActivityController.attach(ActivityController.java:61)
	at org.robolectric.util.ActivityController.of(ActivityController.java:32)
	at org.robolectric.Robolectric.buildActivity(Robolectric.java:92)
	at org.robolectric.Robolectric.buildActivity(Robolectric.java:88)
	at org.tinyheb.mobile.activity.MainActivityTests.setUp(MainActivityTests.java:32)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.robolectric.RobolectricTestRunner$2.evaluate(RobolectricTestRunner.java:250)
	at org.robolectric.RobolectricTestRunner.runChild(RobolectricTestRunner.java:176)
	at org.robolectric.RobolectricTestRunner.runChild(RobolectricTestRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.robolectric.RobolectricTestRunner$1.evaluate(RobolectricTestRunner.java:142)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:81)
	at org.testng.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:69)
	at org.testng.TestRunner$1.run(TestRunner.java:689)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1014)
	at org.testng.TestRunner.privateRunJUnit(TestRunner.java:720)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:236)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:81)
]]>
            </full-stacktrace>
          </exception> <!-- android.content.res.Resources$NotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartSynchronizeButton -->
        <test-method status="FAIL" signature="testAPIServerSearchResultHandling()[pri:0, instance:testAPIServerSearchResultHandling(org.tinyheb.mobile.activity.MainActivityTests)]" name="testAPIServerSearchResultHandling" duration-ms="16" started-at="2016-11-27T16:10:07Z" finished-at="2016-11-27T16:10:07Z">
          <exception class="android.content.res.Resources$NotFoundException">
            <message>
              <![CDATA[String resource ID #0x7f080000]]>
            </message>
            <full-stacktrace>
              <![CDATA[android.content.res.Resources$NotFoundException: String resource ID #0x7f080000
	at android.content.res.Resources.getText(Resources.java:312)
	at android.content.res.Resources.getString(Resources.java:400)
	at android.content.Context.getString(Context.java:409)
	at org.robolectric.util.ActivityController.getActivityTitle(ActivityController.java:113)
	at org.robolectric.util.ActivityController.attach(ActivityController.java:61)
	at org.robolectric.util.ActivityController.of(ActivityController.java:32)
	at org.robolectric.Robolectric.buildActivity(Robolectric.java:92)
	at org.robolectric.Robolectric.buildActivity(Robolectric.java:88)
	at org.tinyheb.mobile.activity.MainActivityTests.setUp(MainActivityTests.java:32)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.robolectric.RobolectricTestRunner$2.evaluate(RobolectricTestRunner.java:250)
	at org.robolectric.RobolectricTestRunner.runChild(RobolectricTestRunner.java:176)
	at org.robolectric.RobolectricTestRunner.runChild(RobolectricTestRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.robolectric.RobolectricTestRunner$1.evaluate(RobolectricTestRunner.java:142)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:81)
	at org.testng.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:69)
	at org.testng.TestRunner$1.run(TestRunner.java:689)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1014)
	at org.testng.TestRunner.privateRunJUnit(TestRunner.java:720)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:236)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:81)
]]>
            </full-stacktrace>
          </exception> <!-- android.content.res.Resources$NotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAPIServerSearchResultHandling -->
        <test-method status="FAIL" signature="testWifiConnectionChangeEventHandling()[pri:0, instance:testWifiConnectionChangeEventHandling(org.tinyheb.mobile.activity.MainActivityTests)]" name="testWifiConnectionChangeEventHandling" duration-ms="26" started-at="2016-11-27T16:10:07Z" finished-at="2016-11-27T16:10:07Z">
          <exception class="android.content.res.Resources$NotFoundException">
            <message>
              <![CDATA[String resource ID #0x7f080000]]>
            </message>
            <full-stacktrace>
              <![CDATA[android.content.res.Resources$NotFoundException: String resource ID #0x7f080000
	at android.content.res.Resources.getText(Resources.java:312)
	at android.content.res.Resources.getString(Resources.java:400)
	at android.content.Context.getString(Context.java:409)
	at org.robolectric.util.ActivityController.getActivityTitle(ActivityController.java:113)
	at org.robolectric.util.ActivityController.attach(ActivityController.java:61)
	at org.robolectric.util.ActivityController.of(ActivityController.java:32)
	at org.robolectric.Robolectric.buildActivity(Robolectric.java:92)
	at org.robolectric.Robolectric.buildActivity(Robolectric.java:88)
	at org.tinyheb.mobile.activity.MainActivityTests.setUp(MainActivityTests.java:32)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.robolectric.RobolectricTestRunner$2.evaluate(RobolectricTestRunner.java:250)
	at org.robolectric.RobolectricTestRunner.runChild(RobolectricTestRunner.java:176)
	at org.robolectric.RobolectricTestRunner.runChild(RobolectricTestRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.robolectric.RobolectricTestRunner$1.evaluate(RobolectricTestRunner.java:142)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:81)
	at org.testng.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:69)
	at org.testng.TestRunner$1.run(TestRunner.java:689)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1014)
	at org.testng.TestRunner.privateRunJUnit(TestRunner.java:720)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:236)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:81)
]]>
            </full-stacktrace>
          </exception> <!-- android.content.res.Resources$NotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWifiConnectionChangeEventHandling -->
        <test-method status="FAIL" signature="testStartPatronInsertButton()[pri:0, instance:testStartPatronInsertButton(org.tinyheb.mobile.activity.MainActivityTests)]" name="testStartPatronInsertButton" duration-ms="19" started-at="2016-11-27T16:10:07Z" finished-at="2016-11-27T16:10:07Z">
          <exception class="android.content.res.Resources$NotFoundException">
            <message>
              <![CDATA[String resource ID #0x7f080000]]>
            </message>
            <full-stacktrace>
              <![CDATA[android.content.res.Resources$NotFoundException: String resource ID #0x7f080000
	at android.content.res.Resources.getText(Resources.java:312)
	at android.content.res.Resources.getString(Resources.java:400)
	at android.content.Context.getString(Context.java:409)
	at org.robolectric.util.ActivityController.getActivityTitle(ActivityController.java:113)
	at org.robolectric.util.ActivityController.attach(ActivityController.java:61)
	at org.robolectric.util.ActivityController.of(ActivityController.java:32)
	at org.robolectric.Robolectric.buildActivity(Robolectric.java:92)
	at org.robolectric.Robolectric.buildActivity(Robolectric.java:88)
	at org.tinyheb.mobile.activity.MainActivityTests.setUp(MainActivityTests.java:32)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.robolectric.RobolectricTestRunner$2.evaluate(RobolectricTestRunner.java:250)
	at org.robolectric.RobolectricTestRunner.runChild(RobolectricTestRunner.java:176)
	at org.robolectric.RobolectricTestRunner.runChild(RobolectricTestRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.robolectric.RobolectricTestRunner$1.evaluate(RobolectricTestRunner.java:142)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:81)
	at org.testng.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:69)
	at org.testng.TestRunner$1.run(TestRunner.java:689)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1014)
	at org.testng.TestRunner.privateRunJUnit(TestRunner.java:720)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:236)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:81)
]]>
            </full-stacktrace>
          </exception> <!-- android.content.res.Resources$NotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStartPatronInsertButton -->
      </class> <!-- org.tinyheb.mobile.activity.MainActivityTests -->
      <class name="org.tinyheb.mobile.WiFiReceiverTest">
        <test-method status="PASS" signature="testSetListener()[pri:0, instance:testSetListener(org.tinyheb.mobile.WiFiReceiverTest)]" name="testSetListener" duration-ms="1398" started-at="2016-11-27T16:10:07Z" finished-at="2016-11-27T16:10:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetListener -->
        <test-method status="PASS" signature="testOnReceiveDisconnectedOtherNetworkState()[pri:0, instance:testOnReceiveDisconnectedOtherNetworkState(org.tinyheb.mobile.WiFiReceiverTest)]" name="testOnReceiveDisconnectedOtherNetworkState" duration-ms="26" started-at="2016-11-27T16:10:08Z" finished-at="2016-11-27T16:10:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOnReceiveDisconnectedOtherNetworkState -->
        <test-method status="PASS" signature="testOnReceiveConnectedWifiStateOnWifiConnected()[pri:0, instance:testOnReceiveConnectedWifiStateOnWifiConnected(org.tinyheb.mobile.WiFiReceiverTest)]" name="testOnReceiveConnectedWifiStateOnWifiConnected" duration-ms="7" started-at="2016-11-27T16:10:08Z" finished-at="2016-11-27T16:10:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOnReceiveConnectedWifiStateOnWifiConnected -->
        <test-method status="PASS" signature="testOnReceiveDisconnectedWifiStateOnWifiDisabled()[pri:0, instance:testOnReceiveDisconnectedWifiStateOnWifiDisabled(org.tinyheb.mobile.WiFiReceiverTest)]" name="testOnReceiveDisconnectedWifiStateOnWifiDisabled" duration-ms="7" started-at="2016-11-27T16:10:08Z" finished-at="2016-11-27T16:10:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOnReceiveDisconnectedWifiStateOnWifiDisabled -->
        <test-method status="PASS" signature="testOnReceiveDisconnectedWifiStateOnWifiDisConnected()[pri:0, instance:testOnReceiveDisconnectedWifiStateOnWifiDisConnected(org.tinyheb.mobile.WiFiReceiverTest)]" name="testOnReceiveDisconnectedWifiStateOnWifiDisConnected" duration-ms="7" started-at="2016-11-27T16:10:08Z" finished-at="2016-11-27T16:10:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOnReceiveDisconnectedWifiStateOnWifiDisConnected -->
      </class> <!-- org.tinyheb.mobile.WiFiReceiverTest -->
    </test> <!-- JUnitTests -->
  </suite> <!-- Suite -->
</testng-results>
